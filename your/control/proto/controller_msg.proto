syntax = "proto2";

package qcraft;
option go_package = "qcraft-proto.ai/onboard/control/proto/controller_msg";

import "onboard/math/proto/piecewise_linear_function.proto";

enum LatControllerType {
  // Lateral second order bicycle, pure kinematic mpc.
  LAT_SOB_PK_MPC = 1;
  // Lateral third order bicycle, pure kinematic mpc.
  LAT_TOB_PK_MPC = 2;
}

enum LonControllerType {
  // Longitudianl second order bicycle, pure kinematic mpc.
  LON_SOB_PK_MPC = 1;
  // Longitudianl third order bicycle, pure kinematic mpc.
  LON_TOB_PK_MPC = 2;
}

enum WheelDriveMode {
  FRONT_WHEEL_DRIVE = 0;
  REAR_WHEEL_DRIVE = 1;
  FOUR_WHEEL_DRIVE = 2;
}

enum AccelerationInterface {
  CLOSEDLOOP = 0;  // acc_from_controller
  OPENEDLOOP = 1;  // acc_from_controller + acc_offset or acc_standstill
  CLOSEDLOOP_WITH_PARKING_COMPENSATION =
      2;  // acc_from_controller or acc_standstill
}

message ControlCalibrationTable {
  message ControlCalibrationInfo {
    optional double speed = 1;
    optional double acceleration = 2;
    optional double command = 3;
  }
  repeated ControlCalibrationInfo calibration = 1;
}

message ControlCalibrationTableV2 {
  optional PiecewiseLinearFunctionDoubleProto idle_v_a_plf =
      1;  // idle or slide: speed - acceleration
  optional PiecewiseLinearFunctionDoubleProto a_throttle_plf =
      2;  // acceleration - throttle
  optional PiecewiseLinearFunctionDoubleProto a_brake_plf =
      3;  // acceleration - brake
  optional PiecewiseLinearFunctionDoubleProto a_gain_wrt_speed_plf =
      4;  // speed - acceleration gain
}

message GainSchedulerInfo {
  optional double speed = 1;  // m/s
  optional double ratio = 2;
}

message GainScheduler {
  repeated GainSchedulerInfo scheduler = 1;
}

message IntegratorConf {
  optional double integral_timer = 1 [default = 0.0];
  optional double integral_bound = 2 [default = 0.0];
  optional double difference_bound = 3 [default = 0.0];
}

// Next ID: 24
message TsPkmpcControllerConf {
  optional double ts = 1;  // sample time (dt) 0.2 now, configurable

  optional GainScheduler t_control_gain_scheduler = 2;
  optional GainScheduler s_control_gain_scheduler = 3;

  repeated double t_matrix_q = 5;
  repeated double t_matrix_r = 6;
  repeated double t_matrix_n = 7;

  repeated double s_matrix_q = 8 [packed = true];
  repeated double s_matrix_r = 9 [packed = true];
  repeated double s_matrix_n = 10 [packed = true];

  optional double s_matrix_xy = 11;
  optional double s_matrix_yaw = 12;
  optional double s_matrix_kappa = 13;
  optional double s_matrix_psi = 14;

  optional double s_matrix_n_xy = 15;
  optional double s_matrix_n_yaw = 16;
  optional double s_matrix_n_kappa = 17;

  optional double t_matrix_q_integral = 18;
  optional double t_matrix_n_integral = 19;

  // whether or not these integrators are enabled might be denoted by
  // existence of IntegratorConf.
  optional IntegratorConf longitudinal_error_integrator = 20;
  optional IntegratorConf lateral_error_integrator = 21;

  optional double t_matrix_q_jerk = 22;
  optional double t_matrix_n_jerk = 23;

  reserved 4;
}

message LonTsPkmpcControllerConf {
  optional double ts = 1;  // sample time (dt) 0.2 now, configurable

  optional GainScheduler control_gain_scheduler = 2;

  repeated double matrix_q = 3;
  repeated double matrix_r = 4;
  repeated double matrix_n = 5;

  optional double matrix_q_integral = 6;
  optional double matrix_n_integral = 7;

  optional double matrix_q_jerk = 8;
  optional double matrix_n_jerk = 9;

  // whether or not these integrators are enabled might be denoted by
  // existence of IntegratorConf.
  optional IntegratorConf error_integrator = 10;
}

message LatTsPkmpcControllerConf {
  optional double ts = 1;  // sample time (dt) 0.2 now, configurable

  optional GainScheduler control_gain_scheduler = 2;

  repeated double matrix_q = 3 [packed = true];
  repeated double matrix_r = 4 [packed = true];
  repeated double matrix_n = 5 [packed = true];

  optional double matrix_xy = 6;
  optional double matrix_yaw = 7;
  optional double matrix_kappa = 8;
  optional double matrix_psi = 9;

  optional double matrix_n_xy = 10;
  optional double matrix_n_yaw = 11;
  optional double matrix_n_kappa = 12;

  // whether or not these integrators are enabled might be denoted by
  // existence of IntegratorConf.
  optional IntegratorConf error_integrator = 13;
}

message StateEstimatorSetting {
  optional bool v_enable = 1 [default = true];
  optional double v_threshold = 2 [default = 2.0];  // m/s.
}

message FullStopProto {
  optional double standstill_acceleration = 1 [default = -2.0];
  optional double abs_planner_speed_upperlimit = 2 [default = 0.5];
  optional double abs_linear_speed_upperlimit = 3 [default = 0.5];
  optional double brake_integral_ratio = 4 [default = 1.05];
  optional double lockdown_acceleration = 5 [default = -1.5];
}

message StandStillProto {
  optional double vel_move_th = 1 [default = 0.1];
  optional double vel_standstill_th = 2 [default = 0.03];
  optional double standstill_time_th = 3 [default = 0.2];
}

message ClosedLoopAccConfProto {
  // Closed loop PID config
  optional bool enable_closed_loop_acc = 1 [default = false];
  optional double acc_deque_time = 2 [default = 1.0];
  optional double throttle_delay_time = 3 [default = 0.44];
  optional double brake_delay_time = 4 [default = 0.3];
  optional double throttle_windup = 5 [default = 100.0];
  optional double kp_acc = 6 [default = 10.0];
  optional double ki_acc = 7 [default = 10.0];
  optional double kd_acc = 8 [default = 0.02];
  optional double max_throttle = 9 [default = 99.9];
  optional double min_delta_throttle = 10 [default = -10.0];
  optional double max_delta_throttle = 11 [default = 10.0];
  optional double steer2throttle_ratio = 12 [default = 1.0];
  optional double brake_windup = 13 [default = 100.0];
  optional double kp_dec = 14 [default = 5.0];
  optional double ki_dec = 15 [default = 5.0];
  optional double kd_dec = 16 [default = 0.01];
  optional double max_brake = 17 [default = -60.0];
  optional double min_delta_brake = 18 [default = -10.0];
  optional double max_delta_brake = 19 [default = 5.0];
  optional double keep_brake_decrease_threshold = 20 [default = 2.0];
}

message SteerDeadZoneAdaptorConf {
  optional bool enable_adapt_deadzone = 1 [default = false];
  optional double steer_straight_th = 2 [default = 0.025];  // rad
  optional double steer_turn_th = 3 [default = 0.075];      // rad
  optional double steer_straight_gain = 4 [default = 1.0];
  optional double steer_turn_gain = 5 [default = 1.0];
  optional double steer_straight_delay_time = 6 [default = 0.4];
  optional double steer_gap_kappa = 7 [default = 0.0];  // kappa
}

message BiasEstimationConf {
  optional bool enable_online_bias_estimation = 1 [default = true];
  optional double weight_on_steering = 2 [default = 0.07];
  optional double weight_on_heading = 3 [default = 0.07];
  optional double heading_err_ub = 4 [default = 0.03];
  optional double lateral_err_ub = 5 [default = 0.2];
  optional double steering_ub = 6 [default = 0.01];
  optional double vel_lb = 7 [default = 3.0];
  optional double calib_steering0_ub = 8 [default = 0.02];
  optional double calib_heading0_ub = 9 [default = 0.02];
  optional double steer_status_delay_time = 10 [default = 0.1];
}

message MracConfProto {
  // Default: 2 order reference model
  optional bool enable_mrac = 1 [default = false];
  // Lyapunov positive definite matrix, 2x2 matrix.
  optional double matrix_p_1 = 2 [default = 435.0];
  // State weight matrix,1x1 matrix, gamma_x
  optional double state_weight = 3 [default = 5.0];
  // Steer wheel angle weight matrix,1x1 matrix, gamma_r
  optional double input_weight = 4 [default = 5.0];
  // Reference model cutoff frequency,rad/s (3Hz)
  optional double cutoff_frequency = 5 [default = 20.0];
  // Reference model damping ratio,sqrt(2)/2
  optional double damping_ratio = 6 [default = 0.707];
  // Error offset gain matrix,1x2 matrix, Ke=[error_gain,0.0]
  optional double ke_min_weight = 7 [default = 10.0];
  optional double ke_max_weight = 8 [default = 20.0];
  // Error in [-max_error,max_error];derivate_error in
  // [-max_derivate_error,max_derivate_error];
  optional double max_error = 9 [default = 0.05];
  optional double max_derivate_error = 10 [deprecated = true];
  // State gain max delta, kx in [-max_delta_kx,max_delta_kx]
  optional double max_delta_kx = 11 [default = 0.01];
  // Steer wheel angle gain max delta kr ((1/m)/s)
  optional double max_delta_kr = 12 [default = 0.1];
  optional double min_kr = 13 [default = 0.8];
  optional double max_kr = 14 [default = 1.2];
  optional double speed_limit = 15 [default = 0.1];
  // Kappa rate mean filter window
  optional double kappa_rate_window = 16 [deprecated = true];
  optional int32 kappa_error_window = 17 [default = 5];
  optional double min_kx = 18 [default = -0.2];
  optional double max_kx = 19 [default = 0.2];
  optional double kappa_threshold = 20 [default = 0.02];
}

message VehDynamicModelConf {
  optional bool enable_dynamic_model_compensation = 1 [default = false];
  optional double mass_fl = 2;
  optional double mass_fr = 3;
  optional double mass_rl = 4;
  optional double mass_rr = 5;
  optional double c_fl = 6;
  optional double c_fr = 7;
  optional double c_rl = 8;
  optional double c_rr = 9;
  optional double wheelbase_f = 10;
  optional double wheelbase_r = 11;
}