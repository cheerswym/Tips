syntax = "proto2";

package qcraft.planner;
option go_package = "qcraft-proto.ai/onboard/planner/freespace/proto/freespace_planner";

import "onboard/proto/trajectory_point.proto";
import "onboard/math/geometry/proto/affine_transformation.proto";
import "onboard/planner/optimization/proto/optimizer.proto";
import "onboard/planner/speed/proto/speed_finder.proto";
import "onboard/planner/decision/proto/constraint.proto";

message FreespaceMapProto {
  enum BoundaryType {
    CURB = 1;
    BARRIER = 2;
    YELLOW_SOLID_LANE = 3;
    YELLOW_DASHED_LANE = 4;
    WHITE_SOLID_LANE = 5;
    WHITE_DASHED_LANE = 6;
    PARKING_SPOT = 7;
    PARKING_STOPPER = 8;
    OTHER = 9;
    VIRTUAL = 10;
  }
}

message DirectionalPathProto {
  repeated PathPoint path = 1;
  optional bool forward = 2;
}

message FreespaceTaskProto {
  enum TaskType {
    UNKNOWN_TASK = 0;
    PERPENDICULAR_PARKING = 1;
    PARALLEL_PARKING = 2;
    THREE_POINT_TURN = 3;
    DRIVING_TO_LANE = 4;
    FREE_DRIVING = 5;
  }
}

message PathManagerStateProto {
  optional PathPoint goal = 1;
  message GlobalGoal {
    optional Vec2dProto pos = 1;
    optional double theta = 2;
  }
  optional GlobalGoal global_goal = 11;
  repeated DirectionalPathProto paths = 4;
  optional int64 curr_path_idx = 5;
  enum DriveState {
    UNKNOWN = 0;
    // Gear shifting and stationary steering to fit next path segment.
    SWITCHING_TO_NEXT = 1;
    DRIVING = 2;
    // Steering wheel back to center, Gear shifting to matched position.
    CENTER_STEER = 3;
    REACH_FINAL_GOAL = 4;
  }
  optional DriveState drive_state = 6;
  message PathGlobalPos {
    repeated Vec2dProto pos = 1;
  }
  repeated PathGlobalPos paths_global_pos = 8;
  message PathGlobalTheta {
    repeated double theta = 1;
  }
  repeated PathGlobalTheta paths_global_theta = 9;
  optional FreespaceTaskProto.TaskType task_type = 10;

  reserved 2, 3, 7;
}

message FreespacePlannerStateProto {
  optional PathManagerStateProto path_manager_state = 1;
  repeated PathPoint prev_local_smoother_path = 2;
  reserved 3;
}

message PathManagerDebugProto {
  optional int64 curr_path_idx = 1;
  optional PathManagerStateProto.DriveState drive_state = 2;
  enum ReplanReason {
    NO_PATHS = 1;
    PATH_NOT_SAFE = 2;
  }
  repeated ReplanReason replan_reason = 3;
}

message HybridAStartDebugProto {
  enum Type {
    SUCCESS = 1;
    START_INVALID = 2;
    GOAL_INVALID = 3;
    COST_MAP_FAIL = 4;
    SEARCH_FAIL = 5;
    PATH_ABNORMAL = 6;
  }
  optional int64 iters = 1;
  optional Type status = 2;
  repeated DirectionalPathProto paths = 3;
}

message FreespaceLocalSmootherDebugProto {
  enum InitTrajType {
    PREV_PATH = 1;
    PURE_PURSUIT = 2;
  }
  message EndPoseError {
    optional double xy = 1;
    optional double theta = 2;
  }
  message CrossableBoundaryProto {
    optional string id = 1;
    optional Vec2dProto start = 2;
    optional Vec2dProto end = 3;
  }
  optional string status = 1;
  optional EndPoseError end_pose_error = 2;
  repeated TrajectoryPointProto init_traj = 3;
  repeated TrajectoryPointProto res_traj = 4;
  optional TrajectoryOptimizerCostInfo init_costs = 5;
  optional TrajectoryOptimizerCostInfo final_costs = 6;
  repeated TrajectoryOptimizerCostInfo iter_costs = 7;
  optional InitTrajType init_traj_type = 8;
  repeated CrossableBoundaryProto enabled_crossable_boundaries = 9;
}

message FreespaceMapDebugProto {
  repeated double region = 1;

  message FreespaceBoundaryProto {
    optional string id = 1;
    optional FreespaceMapProto.BoundaryType type = 2;
    optional Vec2dProto start = 3;
    optional Vec2dProto end = 4;
  }
  repeated FreespaceBoundaryProto boundaries = 2;
  repeated FreespaceBoundaryProto special_boundaries = 3;
}

message FreespaceTaskDebugProto {
  optional FreespaceTaskProto.TaskType task_type = 1;
  optional int64 parking_spot_id = 2;
  optional PathPoint freespace_goal = 4;
  optional int64 target_lane_id = 5;

  reserved 3;
}

message FreespacePlannerDebugProto {
  optional HybridAStartDebugProto ha_star_debug = 1;
  optional FreespaceLocalSmootherDebugProto local_smoother_debug = 2;
  optional FreespaceMapDebugProto freespace_map_debug = 3;
  optional ConstraintProto decision_constraint = 4;
  optional SpeedFinderDebugProto speed_finder_debug = 5;
  optional PathManagerDebugProto path_manager_debug = 6;
  repeated string stalled_object_ids = 7;
  optional FreespaceTaskDebugProto freespace_task_debug = 8;
  optional string planner_status = 9;
}