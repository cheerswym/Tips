
#include "onboard/planner/scheduler/reference_line_qp_smoother.h"

#include "gtest/gtest.h"

namespace qcraft::planner {

namespace {
double ThreePointCurvature(const Vec2d& p0, const Vec2d& p1, const Vec2d& p2) {
  const double arc = 0.5 * (p2 - p0).norm();
  const double delta = NormalizeAngle((p2 - p1).Angle() - (p1 - p0).Angle());
  QCHECK_GT(arc, 0);
  return delta / arc;
}

struct TestCase {
  std::vector<Vec2d> base_poses;
  std::vector<Vec2d> base_tangents;

  std::vector<double> l_upper_bound;
  std::vector<double> l_lower_bound;

  double lateral_offset_weight = 0.;
  double delta_weight = 0.;
  double kappa_weight = 0.;
  double lambda_weight = 0.;
  double base_kappa_gain = 1.0;

  std::vector<double> initial_l;

  double SumOfKappaSquare(const std::vector<double>& l_list) const {
    const int num_points = base_poses.size();
    QCHECK_EQ(num_points, base_tangents.size());
    QCHECK_EQ(num_points, l_list.size());

    double sum = 0.0;
    for (int i = 0; i < num_points - 2; ++i) {
      const double kappa = ThreePointCurvature(
          base_poses[i] + base_tangents[i].Perp() * l_list[i],
          base_poses[i + 1] + base_tangents[i + 1].Perp() * l_list[i + 1],
          base_poses[i + 2] + base_tangents[i + 2].Perp() * l_list[i + 2]);
      sum += kappa * kappa;
    }
    return sum;
  }
};

TEST(ReferenceLineQpSmootherTest, Solve) {
  // Please go to https://qcraft.feishu.cn/docs/doccnVPZU6GFPMgZ9SYqgq7Ddme
  // For visualized result.
  const std::vector<TestCase> test_cases = {
      TestCase{
          // TRIAG-56148
          .base_poses =
              std::vector<Vec2d>{
                  {-683.18, -547.16}, {-683.18, -548.16}, {-683.17, -549.16},
                  {-683.17, -550.16}, {-683.17, -551.16}, {-683.16, -552.16},
                  {-683.14, -553.16}, {-683.12, -554.16}, {-683.10, -555.16},
                  {-683.09, -556.16}, {-683.07, -557.16}, {-683.04, -558.16},
                  {-683.00, -559.16}, {-682.97, -560.15}, {-682.93, -561.15},
                  {-682.89, -562.15}, {-682.85, -563.15}, {-682.65, -564.13},
                  {-682.39, -565.10}, {-682.06, -566.04}, {-681.65, -566.96},
                  {-681.18, -567.84}, {-680.64, -568.68}, {-680.03, -569.47},
                  {-679.36, -570.21}, {-678.64, -570.90}, {-677.87, -571.54},
                  {-677.06, -572.13}, {-676.22, -572.67}, {-675.36, -573.18},
                  {-674.47, -573.64}, {-673.57, -574.07}, {-672.65, -574.47},
                  {-671.72, -574.84}, {-670.78, -575.18}, {-669.84, -575.50},
                  {-668.88, -575.81}, {-667.93, -576.10}, {-666.97, -576.37},
                  {-666.00, -576.63}, {-665.03, -576.89}, {-664.06, -577.13},
                  {-663.09, -577.36}, {-662.12, -577.59}, {-661.14, -577.81},
                  {-660.16, -578.02}, {-659.19, -578.23}, {-658.21, -578.44},
                  {-657.23, -578.65}, {-656.25, -578.87}},
          .base_tangents =
              std::vector<Vec2d>{
                  {0.00, -1.00}, {0.00, -1.00}, {0.00, -1.00}, {0.00, -1.00},
                  {0.00, -1.00}, {0.02, -1.00}, {0.02, -1.00}, {0.02, -1.00},
                  {0.02, -1.00}, {0.02, -1.00}, {0.02, -1.00}, {0.03, -1.00},
                  {0.03, -1.00}, {0.03, -1.00}, {0.03, -1.00}, {0.04, -1.00},
                  {0.04, -1.00}, {0.20, -0.98}, {0.27, -0.96}, {0.33, -0.94},
                  {0.40, -0.91}, {0.54, -0.84}, {0.60, -0.80}, {0.66, -0.75},
                  {0.71, -0.70}, {0.76, -0.65}, {0.80, -0.61}, {0.83, -0.56},
                  {0.85, -0.52}, {0.87, -0.49}, {0.89, -0.45}, {0.91, -0.42},
                  {0.92, -0.39}, {0.94, -0.35}, {0.94, -0.33}, {0.95, -0.31},
                  {0.96, -0.29}, {0.96, -0.29}, {0.96, -0.27}, {0.97, -0.25},
                  {0.97, -0.25}, {0.97, -0.23}, {0.97, -0.23}, {0.97, -0.23},
                  {0.98, -0.21}, {0.98, -0.21}, {0.98, -0.21}, {0.98, -0.21},
                  {0.98, -0.21}, {0.98, -0.21}},
          .l_upper_bound =
              std::vector<double>{
                  3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00,
                  3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00,
                  3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00,
                  3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00,
                  3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00, 3.00},
          .l_lower_bound =
              std::vector<double>{
                  -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00,
                  -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00,
                  -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00,
                  -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00,
                  -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00, -3.00},
          .lateral_offset_weight = 0.0,
          .delta_weight = 0.000000,
          .kappa_weight = 1000.000000,
          .lambda_weight = 0.000000,
          .base_kappa_gain = 0.900000,
          .initial_l =
              std::vector<double>{
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00},
      },
      TestCase{
          .base_poses =
              std::vector<Vec2d>{{0.00, 0.00},   {1.00, 0.05},   {1.99, 0.21},
                                 {2.95, 0.46},   {3.89, 0.81},   {4.78, 1.26},
                                 {5.62, 1.80},   {6.41, 2.42},   {7.12, 3.12},
                                 {7.83, 3.82},   {8.61, 4.45},   {9.45, 5.00},
                                 {10.33, 5.47},  {11.25, 5.85},  {12.21, 6.14},
                                 {13.19, 6.34},  {14.18, 6.47},  {15.18, 6.56},
                                 {16.17, 6.62},  {17.17, 6.64},  {18.17, 6.61},
                                 {19.17, 6.56},  {20.17, 6.46},  {21.16, 6.32},
                                 {22.14, 6.15},  {23.12, 5.92},  {24.07, 5.62},
                                 {24.99, 5.24},  {25.89, 4.79},  {26.74, 4.27},
                                 {27.55, 3.69},  {28.31, 3.04},  {29.06, 2.38},
                                 {29.83, 1.74},  {30.62, 1.13},  {31.43, 0.54},
                                 {32.26, -0.02}, {33.11, -0.55}, {33.97, -1.05},
                                 {34.86, -1.52}, {35.75, -1.97}, {36.66, -2.38},
                                 {37.58, -2.78}, {38.50, -3.17}, {39.42, -3.57},
                                 {40.34, -3.96}, {41.26, -4.35}, {42.18, -4.73},
                                 {43.12, -5.07}, {44.09, -5.32}, {45.08, -5.46},
                                 {46.08, -5.50}, {47.08, -5.43}, {48.06, -5.27},
                                 {49.03, -5.01}, {49.96, -4.65}},
          .base_tangents =
              std::vector<Vec2d>{
                  {1.00, 0.00},  {0.99, 0.10},  {0.98, 0.20},  {0.95, 0.30},
                  {0.92, 0.40},  {0.87, 0.49},  {0.81, 0.58},  {0.75, 0.66},
                  {0.68, 0.73},  {0.75, 0.67},  {0.81, 0.59},  {0.86, 0.51},
                  {0.90, 0.43},  {0.94, 0.34},  {0.97, 0.24},  {0.99, 0.15},
                  {0.99, 0.11},  {1.00, 0.07},  {1.00, 0.04},  {1.00, -0.00},
                  {1.00, -0.04}, {1.00, -0.08}, {0.99, -0.12}, {0.99, -0.15},
                  {0.98, -0.19}, {0.96, -0.27}, {0.94, -0.34}, {0.91, -0.41},
                  {0.87, -0.49}, {0.83, -0.55}, {0.79, -0.62}, {0.74, -0.68},
                  {0.76, -0.65}, {0.78, -0.63}, {0.80, -0.60}, {0.82, -0.57},
                  {0.84, -0.54}, {0.86, -0.52}, {0.87, -0.49}, {0.89, -0.46},
                  {0.90, -0.43}, {0.92, -0.40}, {0.92, -0.40}, {0.92, -0.39},
                  {0.92, -0.39}, {0.92, -0.39}, {0.92, -0.39}, {0.92, -0.39},
                  {0.96, -0.29}, {0.98, -0.19}, {1.00, -0.09}, {1.00, 0.01},
                  {0.99, 0.11},  {0.98, 0.21},  {0.95, 0.31},  {0.91, 0.41}},
          .l_upper_bound =
              std::vector<double>{
                  2.50, 3.82, 3.97, 3.62, 3.80, 2.62, 3.46, 3.80, 3.37, 2.94,
                  2.20, 2.87, 3.22, 3.83, 3.93, 2.95, 3.73, 2.52, 3.61, 3.10,
                  2.03, 3.44, 2.80, 3.65, 3.34, 2.00, 2.99, 3.74, 2.49, 2.65,
                  3.74, 2.38, 3.14, 2.48, 3.94, 3.61, 2.90, 2.16, 2.64, 3.02,
                  3.87, 2.22, 3.10, 3.41, 3.09, 3.63, 3.08, 3.93, 3.21, 3.18},
          .l_lower_bound =
              std::vector<double>{
                  -2.89, -3.19, -2.77, -3.15, -2.58, -2.38, -2.37, -3.23, -3.31,
                  -2.95, -2.18, -3.52, -3.75, -3.85, -3.68, -3.80, -3.85, -3.08,
                  -2.78, -3.41, -2.55, -3.62, -3.70, -3.79, -3.18, -3.90, -3.16,
                  -2.90, -3.32, -3.99, -3.83, -3.59, -2.16, -3.23, -2.97, -3.26,
                  -3.69, -2.49, -3.46, -2.23, -2.44, -3.59, -2.67, -3.63, -2.20,
                  -2.29, -3.40, -2.09, -3.15, -3.82},
          .lateral_offset_weight = 0.0,
          .delta_weight = 0.000000,
          .kappa_weight = 1000.000000,
          .lambda_weight = 0.000000,
          .base_kappa_gain = 0.900000,
          .initial_l =
              std::vector<double>{
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00},
      },
      TestCase{
          .base_poses =
              std::vector<Vec2d>{
                  {0.00, 0.00},    {1.00, 0.05},    {1.99, 0.19},
                  {2.96, 0.43},    {3.90, 0.76},    {4.81, 1.19},
                  {5.67, 1.69},    {6.48, 2.28},    {7.23, 2.94},
                  {7.91, 3.68},    {8.48, 4.49},    {8.90, 5.40},
                  {9.15, 6.36},    {9.24, 7.36},    {9.14, 8.35},
                  {8.87, 9.32},    {8.44, 10.22},   {7.85, 11.02},
                  {7.13, 11.72},   {6.30, 12.28},   {5.39, 12.69},
                  {4.43, 12.94},   {3.43, 13.03},   {2.44, 12.95},
                  {1.45, 12.79},   {0.46, 12.64},   {-0.53, 12.51},
                  {-1.52, 12.39},  {-2.52, 12.29},  {-3.51, 12.20},
                  {-4.51, 12.12},  {-5.51, 12.06},  {-6.51, 12.01},
                  {-7.51, 11.97},  {-8.51, 11.91},  {-9.50, 11.80},
                  {-10.48, 11.62}, {-11.45, 11.38}, {-12.41, 11.09},
                  {-13.35, 10.74}, {-14.26, 10.34}, {-15.15, 9.88},
                  {-16.01, 9.37},  {-16.84, 8.81},  {-17.69, 8.29},
                  {-18.62, 7.91},  {-19.59, 7.67},  {-20.58, 7.59},
                  {-21.58, 7.66},  {-22.55, 7.88}},
          .base_tangents =
              std::vector<Vec2d>{{1.00, 0.00},   {1.00, 0.10},   {0.98, 0.19},
                                 {0.96, 0.29},   {0.93, 0.38},   {0.89, 0.46},
                                 {0.84, 0.55},   {0.78, 0.63},   {0.72, 0.70},
                                 {0.64, 0.76},   {0.50, 0.87},   {0.34, 0.94},
                                 {0.17, 0.99},   {-0.01, 1.00},  {-0.18, 0.98},
                                 {-0.35, 0.94},  {-0.51, 0.86},  {-0.66, 0.75},
                                 {-0.78, 0.63},  {-0.87, 0.49},  {-0.94, 0.33},
                                 {-0.99, 0.17},  {-1.00, 0.00},  {-0.99, -0.17},
                                 {-0.99, -0.15}, {-0.99, -0.14}, {-0.99, -0.12},
                                 {-0.99, -0.11}, {-1.00, -0.10}, {-1.00, -0.08},
                                 {-1.00, -0.07}, {-1.00, -0.06}, {-1.00, -0.04},
                                 {-1.00, -0.03}, {-1.00, -0.09}, {-0.99, -0.15},
                                 {-0.98, -0.21}, {-0.96, -0.26}, {-0.95, -0.32},
                                 {-0.93, -0.38}, {-0.90, -0.43}, {-0.87, -0.48},
                                 {-0.84, -0.54}, {-0.81, -0.58}, {-0.89, -0.45},
                                 {-0.95, -0.31}, {-0.99, -0.16}, {-1.00, -0.01},
                                 {-0.99, 0.15},  {-0.95, 0.30}},
          .l_upper_bound =
              std::vector<double>{
                  2.49, 3.09, 3.15, 2.03, 2.43, 2.56, 3.83, 3.53, 2.32,
                  3.59, 2.28, 3.23, 2.25, 2.00, 3.74, 2.42, 2.43, 3.96,
                  3.74, 2.58, 3.92, 3.08, 3.36, 2.41, 3.88, 3.38, 3.93,
                  3.79, 2.60, 2.72, 2.33, 2.29, 2.13, 2.60, 3.21, 2.01,
                  3.36, 2.68, 2.62, 3.64, 2.96, 2.63, 2.96, 3.41},
          .l_lower_bound =
              std::vector<double>{
                  -2.11, -3.95, -2.05, -3.50, -3.69, -2.04, -3.58, -2.73, -3.16,
                  -2.02, -2.09, -2.36, -3.91, -2.39, -3.51, -3.86, -3.88, -2.69,
                  -2.71, -3.05, -3.55, -2.22, -3.50, -3.59, -3.72, -2.07, -3.89,
                  -2.18, -2.68, -3.22, -3.84, -2.68, -3.85, -3.09, -2.62, -2.63,
                  -2.35, -2.16, -2.30, -3.38, -3.99, -2.32, -2.10, -3.97},
          .lateral_offset_weight = 0.0,
          .delta_weight = 0.000000,
          .kappa_weight = 1000.000000,
          .lambda_weight = 0.000000,
          .base_kappa_gain = 0.900000,
          .initial_l =
              std::vector<double>{
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00},
      },
      TestCase{
          .base_poses =
              std::vector<Vec2d>{
                  {0.00, 0.00},    {0.99, -0.10},   {1.95, -0.39},
                  {2.83, -0.85},   {3.61, -1.48},   {4.24, -2.25},
                  {4.72, -3.13},   {5.01, -4.09},   {5.12, -5.08},
                  {5.03, -6.07},   {4.78, -7.04},   {4.40, -7.96},
                  {3.89, -8.82},   {3.27, -9.61},   {2.55, -10.30},
                  {1.75, -10.89},  {0.87, -11.37},  {-0.07, -11.72},
                  {-1.04, -11.94}, {-2.04, -12.02}, {-3.03, -11.94},
                  {-3.99, -11.67}, {-4.89, -11.22}, {-5.67, -10.61},
                  {-6.33, -9.85},  {-6.83, -8.99},  {-7.15, -8.04},
                  {-7.29, -7.06},  {-7.23, -6.06},  {-6.99, -5.09},
                  {-6.68, -4.14},  {-6.45, -3.17},  {-6.28, -2.18},
                  {-6.19, -1.19},  {-6.17, -0.19},  {-6.22, 0.81},
                  {-6.35, 1.80},   {-6.55, 2.78},   {-6.81, 3.75},
                  {-7.21, 4.66},   {-7.78, 5.48},   {-8.50, 6.18},
                  {-9.34, 6.71},   {-10.27, 7.07},  {-11.26, 7.23},
                  {-12.25, 7.33},  {-13.24, 7.49},  {-14.22, 7.71},
                  {-15.17, 8.00},  {-16.11, 8.35},  {-17.02, 8.75},
                  {-17.91, 9.22},  {-18.76, 9.74},  {-19.58, 10.32},
                  {-20.35, 10.96}, {-21.06, 11.66}, {-21.71, 12.42},
                  {-22.28, 13.24}, {-22.79, 14.10}},
          .base_tangents =
              std::vector<Vec2d>{{1.00, 0.00},   {0.98, -0.19},  {0.92, -0.38},
                                 {0.83, -0.55},  {0.71, -0.70},  {0.56, -0.83},
                                 {0.39, -0.92},  {0.20, -0.98},  {0.01, -1.00},
                                 {-0.19, -0.98}, {-0.32, -0.95}, {-0.44, -0.90},
                                 {-0.56, -0.83}, {-0.67, -0.74}, {-0.77, -0.64},
                                 {-0.85, -0.53}, {-0.91, -0.41}, {-0.96, -0.29},
                                 {-0.99, -0.15}, {-1.00, -0.02}, {-0.98, 0.18},
                                 {-0.93, 0.36},  {-0.85, 0.53},  {-0.73, 0.69},
                                 {-0.58, 0.81},  {-0.41, 0.91},  {-0.23, 0.97},
                                 {-0.04, 1.00},  {0.15, 0.99},   {0.34, 0.94},
                                 {0.27, 0.96},   {0.20, 0.98},   {0.13, 0.99},
                                 {0.06, 1.00},   {-0.02, 1.00},  {-0.09, 1.00},
                                 {-0.16, 0.99},  {-0.23, 0.97},  {-0.30, 0.95},
                                 {-0.49, 0.87},  {-0.65, 0.76},  {-0.79, 0.62},
                                 {-0.89, 0.45},  {-0.97, 0.26},  {-1.00, 0.06},
                                 {-0.99, 0.13},  {-0.98, 0.19},  {-0.97, 0.26},
                                 {-0.95, 0.32},  {-0.93, 0.38},  {-0.90, 0.44},
                                 {-0.87, 0.50},  {-0.84, 0.55},  {-0.80, 0.60},
                                 {-0.74, 0.67},  {-0.68, 0.73},  {-0.61, 0.79},
                                 {-0.54, 0.84},  {-0.47, 0.88}},
          .l_upper_bound =
              std::vector<double>{
                  2.46, 3.72, 3.75, 3.60, 2.45, 3.85, 3.02, 2.46, 2.91,
                  2.84, 2.16, 3.13, 2.72, 3.14, 3.86, 3.29, 2.81, 3.73,
                  3.99, 2.98, 3.89, 2.04, 2.28, 2.34, 3.88, 3.38, 3.44,
                  2.57, 2.99, 3.77, 2.20, 2.23, 2.09, 2.94, 3.68, 3.11,
                  2.80, 3.00, 2.36, 3.90, 2.71, 2.47, 2.62, 3.65, 2.64,
                  3.81, 2.67, 2.88, 2.15, 3.81, 3.59, 2.95, 2.23},
          .l_lower_bound =
              std::vector<double>{
                  -2.98, -2.75, -3.68, -3.86, -3.48, -2.57, -2.08, -3.79, -3.89,
                  -2.32, -3.00, -2.96, -3.95, -2.09, -2.12, -3.69, -3.14, -2.92,
                  -3.56, -3.19, -3.38, -2.51, -2.17, -2.02, -2.67, -3.30, -2.76,
                  -2.69, -3.24, -3.41, -3.19, -2.62, -3.64, -3.60, -3.79, -3.79,
                  -2.03, -3.34, -2.70, -2.78, -3.04, -2.29, -2.50, -3.97, -2.66,
                  -3.83, -3.37, -2.63, -2.64, -3.21, -3.40, -2.68, -2.12},
          .lateral_offset_weight = 0.0,
          .delta_weight = 0.000000,
          .kappa_weight = 1000.000000,
          .lambda_weight = 0.000000,
          .base_kappa_gain = 0.900000,
          .initial_l =
              std::vector<double>{
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00},
      },
      TestCase{
          .base_poses =
              std::vector<Vec2d>{{0.00, 0.00},   {1.00, 0.08},   {1.97, 0.32},
                                 {2.88, 0.71},   {3.73, 1.25},   {4.48, 1.91},
                                 {5.11, 2.68},   {5.60, 3.55},   {5.96, 4.48},
                                 {6.23, 5.45},   {6.51, 6.41},   {6.79, 7.37},
                                 {7.06, 8.33},   {7.34, 9.29},   {7.61, 10.25},
                                 {7.89, 11.21},  {8.16, 12.17},  {8.44, 13.14},
                                 {8.70, 14.10},  {8.94, 15.07},  {9.17, 16.05},
                                 {9.37, 17.03},  {9.55, 18.01},  {9.71, 19.00},
                                 {9.84, 19.99},  {9.96, 20.98},  {10.14, 21.96},
                                 {10.47, 22.91}, {10.93, 23.79}, {11.52, 24.60},
                                 {12.23, 25.30}, {13.03, 25.90}, {13.92, 26.36},
                                 {14.86, 26.69}, {15.84, 26.87}, {16.84, 26.96},
                                 {17.84, 27.00}, {18.84, 26.99}, {19.84, 26.94},
                                 {20.83, 26.84}, {21.82, 26.70}, {22.80, 26.51},
                                 {23.78, 26.27}},
          .base_tangents =
              std::vector<Vec2d>{
                  {1.00, 0.00},  {0.99, 0.16},  {0.95, 0.32},  {0.89, 0.47},
                  {0.80, 0.60},  {0.69, 0.72},  {0.57, 0.82},  {0.43, 0.90},
                  {0.28, 0.96},  {0.28, 0.96},  {0.28, 0.96},  {0.28, 0.96},
                  {0.28, 0.96},  {0.28, 0.96},  {0.28, 0.96},  {0.27, 0.96},
                  {0.27, 0.96},  {0.27, 0.96},  {0.25, 0.97},  {0.23, 0.97},
                  {0.21, 0.98},  {0.19, 0.98},  {0.17, 0.99},  {0.15, 0.99},
                  {0.13, 0.99},  {0.11, 0.99},  {0.25, 0.97},  {0.40, 0.92},
                  {0.53, 0.85},  {0.65, 0.76},  {0.76, 0.65},  {0.85, 0.53},
                  {0.92, 0.40},  {0.97, 0.26},  {0.99, 0.11},  {1.00, 0.06},
                  {1.00, 0.02},  {1.00, -0.03}, {1.00, -0.08}, {0.99, -0.12},
                  {0.99, -0.17}, {0.98, -0.21}, {0.97, -0.26}},
          .l_upper_bound =
              std::vector<double>{
                  3.78, 3.98, 2.03, 3.93, 2.20, 3.36, 2.34, 3.84, 3.22, 2.84,
                  3.41, 3.03, 2.17, 3.92, 2.62, 3.24, 2.26, 3.80, 3.06, 2.10,
                  3.47, 3.67, 2.03, 2.09, 3.52, 2.51, 2.92, 2.44, 2.07, 2.85,
                  3.00, 3.86, 3.50, 3.64, 3.84, 3.59, 3.06},
          .l_lower_bound =
              std::vector<double>{
                  -2.84, -3.86, -3.98, -2.16, -3.93, -3.42, -3.56, -2.82,
                  -3.79, -2.94, -2.92, -3.01, -2.90, -2.84, -3.77, -2.64,
                  -3.09, -2.69, -2.24, -3.03, -3.50, -3.18, -3.74, -2.93,
                  -2.76, -2.43, -2.94, -3.09, -3.77, -3.03, -3.41, -3.58,
                  -3.55, -3.98, -3.85, -2.99, -3.82},
          .lateral_offset_weight = 0.0,
          .delta_weight = 0.000000,
          .kappa_weight = 1000.000000,
          .lambda_weight = 0.000000,
          .base_kappa_gain = 0.800000,
          .initial_l =
              std::vector<double>{
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00},
      },
  };

  for (const auto& t : test_cases) {
    const int n = static_cast<int>(t.initial_l.size());

    ReferenceLineQpSmoother::Input input;
    input.base_poses = std::move(t.base_poses);
    input.base_tangents = std::move(t.base_tangents);

    input.l_upper_bound = std::move(t.l_upper_bound);
    input.l_lower_bound = std::move(t.l_lower_bound);

    input.pre_fixed_lateral_offsets[0] = t.initial_l[0];
    input.pre_fixed_lateral_offsets[1] = t.initial_l[1];
    input.pre_fixed_lateral_offsets[2] = t.initial_l[2];

    input.post_fixed_lateral_offsets[0] = t.initial_l[t.initial_l.size() - 3];
    input.post_fixed_lateral_offsets[1] = t.initial_l[t.initial_l.size() - 2];
    input.post_fixed_lateral_offsets[2] = t.initial_l[t.initial_l.size() - 1];

    planner::ReferenceLineQpSmootherParamProto param;
    param.set_lateral_offset_weight(t.lateral_offset_weight);
    param.set_delta_weight(t.delta_weight);
    param.set_kappa_weight(t.kappa_weight);
    param.set_lambda_weight(t.lambda_weight);
    param.set_base_kappa_gain(t.base_kappa_gain);

    const ReferenceLineQpSmoother smoother(&param, std::move(input));

    const std::optional<std::vector<double>> result_or = smoother.Solve();
    EXPECT_TRUE(result_or);
    const std::vector<double>& result = *result_or;

    std::vector<double> full_result = t.initial_l;
    for (int i = 3; i < n - 3; ++i) {
      full_result[i] = result[i - 3];
    }

    const double old_sum_kappa_sqr = t.SumOfKappaSquare(t.initial_l);
    const double new_sum_kappa_sqr = t.SumOfKappaSquare(full_result);

    EXPECT_GE(old_sum_kappa_sqr, new_sum_kappa_sqr);
  }
}

}  // namespace

}  // namespace qcraft::planner
