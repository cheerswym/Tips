load("//bazel:cpplint.bzl", "cpplint")
load("//bazel:rules_cc.bzl", "cc_library", "cc_test")

package(default_visibility = ["//visibility:public"])

###############################################################################
# Libraries.
cc_library(
    name = "aeb_planner",
    srcs = ["aeb_planner.cc"],
    hdrs = ["aeb_planner.h"],
    deps = [
        "//onboard/math/geometry:polygon2d",
        "//onboard/planner:emergency_stop",
        "//onboard/planner:planner_input",
        "//onboard/proto:perception_cc_proto",
        "//onboard/proto:trajectory_point_cc_proto",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "previous_trajectory_planner",
    srcs = ["previous_trajectory_planner.cc"],
    hdrs = ["previous_trajectory_planner.h"],
    deps = [
        "//onboard/global:trace",
        "//onboard/planner:planner_defs",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner:trajectory_validation",
        "//onboard/planner/proto:planner_params_cc_proto",
        "//onboard/proto:positioning_cc_proto",
        "//onboard/proto:trajectory_point_cc_proto",
        "//onboard/proto:vehicle_cc_proto",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "fallback_planner",
    srcs = ["fallback_planner.cc"],
    hdrs = ["fallback_planner.h"],
    deps = [
        "//onboard/async:thread_pool",
        "//onboard/maps:lane_path",
        "//onboard/params:vehicle_param_api",
        "//onboard/planner:min_length_path_extension",
        "//onboard/planner:planner_defs",
        "//onboard/planner:planner_flags",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner:trajectory_end_info",
        "//onboard/planner:trajectory_validation",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/common:planner_status",
        "//onboard/planner/decision:constraint_builder",
        "//onboard/planner/decision:decision_util",
        "//onboard/planner/decision/proto:constraint_cc_proto",
        "//onboard/planner/object:drive_passage_filter",
        "//onboard/planner/object:low_likelihood_filter",
        "//onboard/planner/object:partial_spacetime_object_trajectory",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/object:spacetime_trajectory_manager",
        "//onboard/planner/proto:fallback_planner_debug_cc_proto",
        "//onboard/planner/proto:planner_params_cc_proto",
        "//onboard/planner/router:drive_passage_builder",
        "//onboard/planner/router:route_sections_info",
        "//onboard/planner/scene/proto:scene_understanding_cc_proto",
        "//onboard/planner/scheduler:path_boundary_builder",
        "//onboard/planner/scheduler:scheduler_output",
        "//onboard/planner/scheduler:scheduler_util",
        "//onboard/planner/scheduler:smooth_reference_line_result",
        "//onboard/planner/scheduler/proto:lane_change_cc_proto",
        "//onboard/planner/speed:speed_finder",
        "//onboard/planner/util:planner_status_macros",
        "//onboard/planner/util:vehicle_geometry_util",
        "//onboard/proto:charts_cc_proto",
        "//onboard/proto:perception_cc_proto",
        "//onboard/proto:positioning_cc_proto",
        "//onboard/proto:trajectory_point_cc_proto",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "expert_planner",
    srcs = ["expert_planner.cc"],
    hdrs = ["expert_planner.h"],
    deps = [
        "//offboard/planner/ml/datasets/pnc_scenario_dataset:proto_converter",
        "//offboard/planner/ml/datasets/pnc_scenario_dataset/proto:pnc_scenario_cc_proto",
        "//onboard/async:thread_pool",
        "//onboard/maps:lane_path",
        "//onboard/params:vehicle_param_api",
        "//onboard/planner:min_length_path_extension",
        "//onboard/planner:planner_defs",
        "//onboard/planner:planner_flags",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner:trajectory_end_info",
        "//onboard/planner:trajectory_validation",
        "//onboard/planner/common:lane_path_info",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/common:planner_status",
        "//onboard/planner/decision:constraint_builder",
        "//onboard/planner/decision:decision_util",
        "//onboard/planner/decision/proto:constraint_cc_proto",
        "//onboard/planner/object:drive_passage_filter",
        "//onboard/planner/object:low_likelihood_filter",
        "//onboard/planner/object:partial_spacetime_object_trajectory",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/object:spacetime_trajectory_manager",
        "//onboard/planner/proto:expert_planner_debug_cc_proto",
        "//onboard/planner/proto:planner_params_cc_proto",
        "//onboard/planner/router:drive_passage_builder",
        "//onboard/planner/router:route_sections",
        "//onboard/planner/scene/proto:scene_understanding_cc_proto",
        "//onboard/planner/scheduler:multi_tasks_scheduler",
        "//onboard/planner/scheduler:path_boundary_builder",
        "//onboard/planner/scheduler:scheduler_output",
        "//onboard/planner/scheduler:scheduler_util",
        "//onboard/planner/scheduler:smooth_reference_line_result",
        "//onboard/planner/scheduler:target_lane_path_filter",
        "//onboard/planner/scheduler/proto:lane_change_cc_proto",
        "//onboard/planner/speed:speed_finder",
        "//onboard/planner/util:planner_status_macros",
        "//onboard/planner/util:vehicle_geometry_util",
        "//onboard/proto:charts_cc_proto",
        "//onboard/proto:perception_cc_proto",
        "//onboard/proto:positioning_cc_proto",
        "//onboard/proto:trajectory_point_cc_proto",
        "//onboard/utils:file_util",
        "//onboard/utils:history_buffer",
        "//onboard/utils:time_util",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "path_bounded_est_planner_output",
    hdrs = ["path_bounded_est_planner_output.h"],
    deps = [
        ":fallback_planner",
        "//onboard/planner:est_planner_output",
        "//onboard/planner/common:planner_status",
        "//onboard/planner/router:route_sections",
        "//onboard/planner/scheduler:scheduler_output",
        "//onboard/planner/selector/proto:selector_debug_cc_proto",
        "//onboard/proto:charts_cc_proto",
        "//onboard/proto:prediction_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
    ],
)

cc_library(
    name = "multi_tasks_est_planner_input",
    hdrs = ["multi_tasks_est_planner_input.h"],
    deps = [
        "//onboard/planner:planner_input",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/decision:tl_info",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/object:spacetime_trajectory_manager",
        "//onboard/planner/router:route",
        "//onboard/planner/scene/proto:scene_understanding_cc_proto",
        "//onboard/planner/scheduler:smooth_reference_line_result",
        "//onboard/proto:perception_cc_proto",
    ],
)

cc_library(
    name = "multi_tasks_est_planner",
    srcs = ["multi_tasks_est_planner.cc"],
    hdrs = ["multi_tasks_est_planner.h"],
    deps = [
        ":expert_planner",
        ":multi_tasks_est_planner_input",
        ":path_bounded_est_planner_output",
        "//onboard/async:parallel_for",
        "//onboard/async:thread_pool",
        "//onboard/planner:est_planner",
        "//onboard/planner:planner_flags",
        "//onboard/planner/common:multi_timer_util",
        "//onboard/planner/common:planner_status",
        "//onboard/planner/proto:fallback_planner_debug_cc_proto",
        "//onboard/planner/router:route_sections_util",
        "//onboard/planner/scheduler:multi_tasks_scheduler",
        "//onboard/planner/scheduler:scheduler_plot_util",
        "//onboard/planner/scheduler:target_lane_path_filter",
        "//onboard/planner/scheduler/lane_graph:lane_graph_builder",
        "//onboard/planner/scheduler/lane_graph:lane_path_finder",
        "//onboard/planner/selector",
        "//onboard/planner/util:planner_status_macros",
        "@com_google_absl//absl/cleanup",
    ],
)

cc_library(
    name = "multi_tasks_async_planner",
    srcs = ["multi_tasks_async_planner.cc"],
    hdrs = ["multi_tasks_async_planner.h"],
    deps = [
        ":fallback_planner",
        ":multi_tasks_est_planner_input",
        ":path_bounded_est_planner_output",
        ":st_path_planner",
        "//offboard/planner/ml/params_tuning/dopt_auto_tuning/proto:auto_tuning_cc_proto",
        "//onboard/async:async_util",
        "//onboard/async:future",
        "//onboard/async:parallel_for",
        "//onboard/async:thread_pool",
        "//onboard/global:buffered_logger",
        "//onboard/global:logging",
        "//onboard/global:trace",
        "//onboard/lite:check",
        "//onboard/lite:logging",
        "//onboard/maps:lane_path",
        "//onboard/maps:lane_point",
        "//onboard/params:vehicle_param_api",
        "//onboard/params/v2/proto/assembly:vehicle_cc_proto",
        "//onboard/params/v2/proto/vehicle:common_cc_proto",
        "//onboard/planner:est_planner_output",
        "//onboard/planner:planner_defs",
        "//onboard/planner:planner_flags",
        "//onboard/planner:planner_input",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_params",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner:planner_state",
        "//onboard/planner:teleop_state",
        "//onboard/planner:trajectory_end_info",
        "//onboard/planner:trajectory_validation",
        "//onboard/planner/common:lane_path_info",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/common:planner_status",
        "//onboard/planner/common/proto:planner_status_cc_proto",
        "//onboard/planner/decision:constraint_builder",
        "//onboard/planner/decision:constraint_manager",
        "//onboard/planner/decision:decider_input",
        "//onboard/planner/decision:decider_output",
        "//onboard/planner/decision:decision_util",
        "//onboard/planner/decision/proto:constraint_cc_proto",
        "//onboard/planner/initializer/proto:initializer_cc_proto",
        "//onboard/planner/object:partial_spacetime_object_trajectory",
        "//onboard/planner/object:planner_object",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/object:spacetime_object_trajectory",
        "//onboard/planner/object:spacetime_trajectory_manager",
        "//onboard/planner/object:spacetime_trajectory_manager_builder",
        "//onboard/planner/object/proto:planner_object_cc_proto",
        "//onboard/planner/optimization/proto:optimizer_cc_proto",
        "//onboard/planner/proto:planner_params_cc_proto",
        "//onboard/planner/proto:trajectory_validation_cc_proto",
        "//onboard/planner/router:drive_passage",
        "//onboard/planner/router:route",
        "//onboard/planner/router:route_sections_info",
        "//onboard/planner/scheduler:multi_tasks_scheduler",
        "//onboard/planner/scheduler:scheduler_input",
        "//onboard/planner/scheduler:scheduler_output",
        "//onboard/planner/scheduler:scheduler_plot_util",
        "//onboard/planner/scheduler:target_lane_path_filter",
        "//onboard/planner/scheduler/lane_graph",
        "//onboard/planner/scheduler/lane_graph:lane_graph_builder",
        "//onboard/planner/scheduler/lane_graph:lane_path_finder",
        "//onboard/planner/scheduler/proto:lane_change_cc_proto",
        "//onboard/planner/selector",
        "//onboard/planner/selector:selector_input",
        "//onboard/planner/speed:speed_finder",
        "//onboard/planner/speed:speed_finder_input",
        "//onboard/planner/speed:speed_finder_output",
        "//onboard/planner/speed/proto:speed_finder_cc_proto",
        "//onboard/planner/util:planner_status_macros",
        "//onboard/prediction",
        "//onboard/prediction:predicted_trajectory",
        "//onboard/proto:charts_cc_proto",
        "//onboard/proto:planner_cc_proto",
        "//onboard/proto:prediction_cc_proto",
        "//onboard/proto:trajectory_point_cc_proto",
        "//onboard/proto:vehicle_cc_proto",
        "@com_github_gflags_gflags//:gflags",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:span",
    ],
)

cc_library(
    name = "cruise_task",
    srcs = ["cruise_task.cc"],
    hdrs = ["cruise_task.h"],
    deps = [
        ":aeb_planner",
        ":multi_tasks_est_planner",
        ":previous_trajectory_planner",
        "//offboard/planner/ml/params_tuning/dopt_auto_tuning:auto_tuning_common_flags",
        "//onboard/async:thread_pool",
        "//onboard/autonomy_state:autonomy_state_util",
        "//onboard/eval:qevent",
        "//onboard/global:car_common",
        "//onboard/lite:lite_module",
        "//onboard/planner:driving_state",
        "//onboard/planner:planner_flags",
        "//onboard/planner:planner_input",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_state",
        "//onboard/planner:planner_util",
        "//onboard/planner:teleop_state",
        "//onboard/planner:trajectory_util",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/common:planner_status",
        "//onboard/planner/decision:door_open_decider",
        "//onboard/planner/decision:traffic_light_info_collector",
        "//onboard/planner/decision:turn_signal_decider",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/object:spacetime_trajectory_manager",
        "//onboard/planner/router:route_manager_output",
        "//onboard/planner/router:route_sections_util",
        "//onboard/planner/router:route_util",
        "//onboard/planner/scene:scene_reasoning_util",
        "//onboard/planner/scene:scene_understanding",
        "//onboard/planner/scheduler:local_map_builder",
        "//onboard/planner/scheduler:scheduler_util",
        "//onboard/planner/scheduler:smooth_reference_line_builder",
        "//onboard/planner/util:planner_status_macros",
        "//onboard/proto:planner_cc_proto",
        "@com_google_absl//absl/cleanup",
    ],
)

cc_library(
    name = "st_path_planner",
    srcs = ["st_path_planner.cc"],
    hdrs = ["st_path_planner.h"],
    deps = [
        "//onboard/async:thread_pool",
        "//onboard/lidar/vehicle_model",
        "//onboard/planner:discretized_path",
        "//onboard/planner:min_length_path_extension",
        "//onboard/planner:planner_flags",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner:teleop_state",
        "//onboard/planner:trajectory_point",
        "//onboard/planner:trajectory_util",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/common:planner_status",
        "//onboard/planner/decision:constraint_builder",
        "//onboard/planner/decision:constraint_manager",
        "//onboard/planner/decision:decider_input",
        "//onboard/planner/decision:decider_output",
        "//onboard/planner/initializer:initializer_input",
        "//onboard/planner/initializer:initializer_output",
        "//onboard/planner/initializer:search_motion",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/object:spacetime_trajectory_manager",
        "//onboard/planner/object:spacetime_trajectory_manager_builder",
        "//onboard/planner/optimization/ddp:trajectory_optimizer",
        "//onboard/planner/optimization/ddp:trajectory_optimizer_input",
        "//onboard/planner/optimization/ddp:trajectory_optimizer_util",
        "//onboard/planner/optimization/proto:optimizer_cc_proto",
        "//onboard/planner/router:plot_util",
        "//onboard/planner/router:route_sections",
        "//onboard/planner/scheduler:scheduler_output",
        "//onboard/planner/util:path_util",
        "//onboard/planner/util:planner_status_macros",
        "//onboard/proto:charts_cc_proto",
        "//onboard/proto:perception_cc_proto",
        "//onboard/proto:positioning_cc_proto",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "plan_task",
    hdrs = ["plan_task.h"],
    deps = [
        "//common/proto:lane_point_cc_proto",
        "//onboard/maps:lane_path",
        "//onboard/maps:lane_point",
        "//onboard/maps:semantic_map_defs",
        "//onboard/planner/common:global_pose",
        "//onboard/planner/plan/proto:plan_task_cc_proto",
    ],
)

cc_library(
    name = "plan_task_dispatcher",
    srcs = ["plan_task_dispatcher.cc"],
    hdrs = ["plan_task_dispatcher.h"],
    deps = [
        ":cruise_task",
        ":free_drive_task",
        ":parking_task",
        ":plan_task_helper",
        ":uturn_task",
        "//onboard/async:thread_pool",
        "//onboard/lite:lite_module",
        "//onboard/math:coordinate_converter",
        "//onboard/planner:planner_flags",
        "//onboard/planner:planner_input",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_params",
        "//onboard/planner:planner_state",
        "//onboard/planner:teleop_state",
        "//onboard/planner/initializer/proto:initializer_cc_proto",
        "//onboard/planner/object:low_likelihood_filter",
        "//onboard/planner/object:motion_state_filter",
        "//onboard/planner/object:planner_object_manager_builder",
        "//onboard/planner/object:predicted_motion_filter",
        "//onboard/planner/object:reflected_object_in_proximity_filter",
        "//onboard/planner/proto:planner_output_cc_proto",
        "//onboard/planner/router:route_manager_output",
        "//onboard/proto:perception_cc_proto",
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "plan_task_helper",
    srcs = ["plan_task_helper.cc"],
    hdrs = ["plan_task_helper.h"],
    deps = [
        ":plan_task",
        "//onboard/lite:logging",
        "//onboard/math:coordinate_converter",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner/router:route_manager_output",
        "//onboard/planner/router:route_util",
        "//onboard/proto:positioning_cc_proto",
        "//onboard/utils:file_util",
    ],
)

cc_library(
    name = "parking_task",
    srcs = ["parking_task.cc"],
    hdrs = ["parking_task.h"],
    deps = [
        "//onboard/math:coordinate_converter",
        "//onboard/params:vehicle_param_api",
        "//onboard/planner:driving_state",
        "//onboard/planner:emergency_stop",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_params",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner:planner_util",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/freespace:freespace_constraint_builder",
        "//onboard/planner/freespace:freespace_planner",
        "//onboard/planner/freespace:freespace_util",
        "//onboard/planner/freespace:path_manager",
        "//onboard/planner/freespace/proto:freespace_planner_cc_proto",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/object:spacetime_trajectory_manager",
        "//onboard/planner/scene:off_road_scene_reasoning",
        "//onboard/proto:charts_cc_proto",
        "//onboard/proto:chassis_cc_proto",
        "//onboard/proto:positioning_cc_proto",
        "//onboard/proto:trajectory_cc_proto",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "uturn_task",
    srcs = ["uturn_task.cc"],
    hdrs = ["uturn_task.h"],
    deps = [
        "//onboard/maps:lane_path",
        "//onboard/math:coordinate_converter",
        "//onboard/params:vehicle_param_api",
        "//onboard/planner:driving_state",
        "//onboard/planner:emergency_stop",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_params",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner:planner_util",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/freespace:freespace_constraint_builder",
        "//onboard/planner/freespace:freespace_planner",
        "//onboard/planner/freespace:freespace_util",
        "//onboard/planner/freespace:path_manager",
        "//onboard/planner/freespace/proto:freespace_planner_cc_proto",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/scene:off_road_scene_reasoning",
        "//onboard/proto:charts_cc_proto",
        "//onboard/proto:chassis_cc_proto",
        "//onboard/proto:positioning_cc_proto",
        "//onboard/proto:trajectory_cc_proto",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "free_drive_task",
    srcs = ["free_drive_task.cc"],
    hdrs = ["free_drive_task.h"],
    deps = [
        "//onboard/math:coordinate_converter",
        "//onboard/params:vehicle_param_api",
        "//onboard/planner:driving_state",
        "//onboard/planner:emergency_stop",
        "//onboard/planner:planner_main_loop_internal",
        "//onboard/planner:planner_params",
        "//onboard/planner:planner_semantic_map_manager",
        "//onboard/planner:planner_util",
        "//onboard/planner/common:plan_start_point_info",
        "//onboard/planner/freespace:freespace_constraint_builder",
        "//onboard/planner/freespace:freespace_planner",
        "//onboard/planner/freespace:freespace_util",
        "//onboard/planner/freespace:path_manager",
        "//onboard/planner/freespace/proto:freespace_planner_cc_proto",
        "//onboard/planner/object:planner_object_manager",
        "//onboard/planner/scene:off_road_scene_reasoning",
        "//onboard/proto:charts_cc_proto",
        "//onboard/proto:chassis_cc_proto",
        "//onboard/proto:positioning_cc_proto",
        "//onboard/proto:trajectory_cc_proto",
        "@com_google_absl//absl/status:statusor",
    ],
)

###############################################################################
# Proto.

###############################################################################
# Binaries.

###############################################################################
# Tests.

cc_test(
    name = "plan_task_helper_test",
    srcs = ["plan_task_helper_test.cc"],
    deps = [
        ":plan_task_helper",
        "//onboard/global:test_main",
        "@com_google_googletest//:gtest",
    ],
)

cpplint()
